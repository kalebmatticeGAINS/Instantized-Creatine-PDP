
{{ 'tailwind.min.css' | asset_url | stylesheet_tag }}
<script src="{{ 'vendor-glightbox.min.js' | asset_url }}" defer></script>
<script src="{{ 'replo-product-form.js' | asset_url }}" defer></script>

<style>
  /* Selected state styling for size and color options */
  .product-option:checked + label {
    border-color: rgba(0, 0, 0, 0.8) !important;
    background-color: rgba(0, 0, 0, 0.04) !important;
    color: #000 !important;
  }

  /* Caramel Apple quantity option styling */
  .caramel-apple-option:checked + label {
    background-color: #000 !important;
    color: #fff !important;
    border-color: #000 !important;
  }

  .caramel-apple-option:checked + label .price-original,
  .caramel-apple-option:checked + label .price-compare {
    color: rgba(255, 255, 255, 0.7) !important;
  }

  .caramel-apple-option:checked + label .price-final {
    color: #fff !important;
  }

  .caramel-apple-option:checked + label .radio-circle::after {
    opacity: 1;
  }

  .caramel-apple-options {
    display: none;
  }

  .radio-circle {
    position: relative;
    width: 20px;
    height: 20px;
    border: 2px solid rgba(0, 0, 0, 0.3);
    border-radius: 50%;
    flex-shrink: 0;
  }

  .radio-circle::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: #fff;
    opacity: 0;
    transition: opacity 0.2s;
  }

  .caramel-apple-option + label .radio-circle {
    border-color: rgba(0, 0, 0, 0.3);
  }

  .caramel-apple-option:checked + label .radio-circle {
    border-color: #fff;
    background-color: transparent;
  }
</style>

{% liquid
  assign current_variant = product.selected_or_first_available_variant
%}

<script type="application/json" id="replo-product-data">
  {
    "variants": {{ product.variants | json }},
    "title": {{ product.title | json }}
  }
</script>

<script>
  console.log('this is being rendered')
  window.productVariants = {{ product.variants | json }}
</script>

<div class="form-wrapper rounded">
  {% form 'product', product, onsubmit: 'onSubmitAtcForm(this, event)' %}
    <input type="hidden" name="id" value="{{ current_variant.id }}" id="variant-id-input">
    <input type="hidden" name="quantity" value="1" id="quantity-input">

    {% unless product.has_only_default_variant %}
      <ul
        class="product-options list-unstyled mb-6"
        aria-label="{{ 'product.product_options' | t }}"
      >
        {% for option in product.options_with_values %}
          {% if settings.size_buttons_names contains option.name %}
            <div data-size-selector>
              <div class="tw-mb-3 tw-flex tw-items-center tw-justify-between">
                <span class="tw-text-base tw-font-bold tw-uppercase">{{ option.name }}</span>
              </div>
              <ul class="size-buttons list-unstyled tw-flex tw-flex-wrap tw-gap-2 tw-mb-6" aria-label="{{ option.name }}">
              {% for value in option.values %}
                <li class="tw-m-0 tw-block tw-p-0">
                  <input
                    class="product-option visually-hidden"
                    type="radio"
                    name="option-{{ option.name | handleize }}"
                    id="option-{{ option.name | handleize }}-{{ value | handleize }}"
                    value="{{ value | escape }}"
                    data-product-id="{{ product.id }}"
                    onchange="onChangeProductOption(this, event)"
                    {% if option.selected_value == value %}
                      checked
                    {% endif %}
                  >
                  <label 
                    for="option-{{ option.name | handleize }}-{{ value | handleize }}"
                    class="tw-flex tw-min-w-12 tw-h-12 tw-cursor-pointer tw-items-center tw-justify-center tw-rounded-xl tw-border tw-border-solid tw-border-black/25 tw-bg-white tw-px-4 tw-py-3 tw-text-center tw-text-base tw-font-bold tw-uppercase tw-transition-all hover:tw-border-black/50"
                  >
                    {{ value }}
                  </label>
                </li>
              {% endfor %}
            </ul>
            </div>
          {% endif %}
          {% if option.name == 'Flavor' %}
            {% comment %} FLAVOR OPTIONS {% endcomment %}
            <div class="tw-mt-6">
              <div class="tw-mb-3 tw-flex tw-items-center tw-justify-between">
                <span class="tw-text-base tw-font-bold tw-uppercase">Flavor</span>
              </div>

              <div class="tw-relative">
                <button
                  type="button"
                  class="tw-flex tw-w-full tw-items-center tw-gap-3 tw-rounded-xl tw-border tw-border-solid tw-border-black/25 tw-bg-white tw-px-4 tw-py-3 tw-text-left tw-text-black"
                  data-selector-toggle
                  data-selected-option="og"
                >
                  <div class="tw-flex tw-items-center tw-gap-3" data-flavor-content>
                    {% for image in product.metafields.custom.flavor_badges.value %}
                      {{
                        image
                        | image_url: width: 150, height: 150, crop: 'center'
                        | image_tag: class: 'tw-size-9 tw-rounded-full tw-object-contain tw-p-1', height: 150, width: 150
                      }}
                      {% break %}
                    {% endfor %}

                    <span class="tw-text-base tw-font-bold tw-uppercase">{{ option.values.first }}</span>
                  </div>

                  <svg
                    class="tw-ml-auto tw-size-8 tw-transition-all"
                    width="42"
                    height="42"
                    viewBox="0 0 42 42"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <g clip-path="url(#clip0_23_31)">
                    <path d="M12.4511 14.5163L9.98364 16.9838L20.4836 27.4838L30.9836 16.9838L28.5161 14.5163L20.4836 22.5313L12.4511 14.5163Z" fill="black"/>
                    </g>
                    <defs>
                    <clipPath id="clip0_23_31">
                    <rect width="42" height="42" fill="white"/>
                    </clipPath>
                    </defs>
                  </svg>
                </button>

                <div
                  class="
                    tw-absolute tw-left-0 tw-top-full tw-z-[1] tw-mt-2 tw-grid tw-w-full tw-rounded-xl tw-border tw-border-solid
                    tw-border-black/25 tw-bg-white tw-shadow-lg tw-transition-all
                  "
                  style="grid-template-rows: 0fr; opacity: 0;"
                  data-selector-content
                >
                  <div class="tw-overflow-hidden">
                    <input
                      class="product-option visually-hidden"
                      id="flavor-value"
                      name="flavor"
                      data-product-handle="{{ product.handle }}"
                      data-product-id="{{ product.id }}"
                      value="{{ option.values.first }}"
                      onchange="onChangeProductOption(this, event)"
                    >
                    <ul class="tw-m-0 tw-list-none tw-p-0">
                      {% for value in option.values %}
                        <li class="tw-m-0 tw-block tw-p-0">
                          <label
                            class="tw-flex tw-w-full tw-cursor-pointer tw-items-center tw-gap-3 tw-border-0 tw-bg-transparent tw-px-4 tw-py-3 tw-text-left tw-text-black"
                            data-flavor-content
                            data-flavor="{{ value }}"
                            data-variant-id="{{ value.variant.id }}"
                          >
                            {% assign current_index = forloop.index0 %}
                            {% for image in product.metafields.custom.flavor_badges.value %}
                              {% if forloop.index0 == current_index %}
                                {{
                                  image
                                  | image_url: width: 150, height: 150, crop: 'center'
                                  | image_tag: class: 'tw-size-9 tw-rounded-full tw-object-contain tw-p-1', height: 150, width: 150
                                }}
                              {% endif %}
                            {% endfor %}

                            <span class="tw-text-base tw-font-bold tw-uppercase">{{ value }}</span>
                            {%  if value == 'Caramel Apple' %}
                              <span class="tw-text-xs tw-font-bold tw-uppercase tw-text-white tw-p-1 tw-rounded-lg" style="background: linear-gradient(135deg, #9ECD15, #EB7E6D, #E35298, #BD2991, #39B4CF);">NEW!</span>
                            {% endif %}
                          </label>
                        </li>
                      {% endfor %}
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          {%  endif %}
        {% endfor %}
      </ul>
    {% endunless %}

    {% comment %} {% render 'product-purchase-options' %} {% endcomment %}
    {%- assign form_id = 'product_form_' | append: product.id -%}
    <div data-subscription-block>
      {% render 'skio-block', product: product, product_form_id: form_id, debug: false %}
    </div>

    {% comment %} CARAMEL APPLE - BUY MORE, SAVE MORE {% endcomment %}
    <div class="caramel-apple-options tw-mb-6" data-caramel-apple-options>
      <div class="tw-mb-3">
        <span class="tw-text-base tw-font-bold tw-uppercase">Buy More, Save More</span>
      </div>
      
      <div class="tw-rounded-xl tw-border tw-border-solid tw-border-black/25 tw-overflow-hidden">
        {% comment %} 1 Bag Option {% endcomment %}
        <div>
          <input
            class="caramel-apple-option visually-hidden"
            type="radio"
            name="caramel-apple-quantity"
            id="caramel-apple-qty-1"
            value="1"
            data-variant-id="51253690368292"
            data-original-price="45.00"
            data-discount-price="35.97"
            onchange="onChangeCaramelAppleQuantity(this)"
            checked
          >
          <label
            for="caramel-apple-qty-1"
            class="tw-flex tw-cursor-pointer tw-items-center tw-gap-3 tw-bg-white tw-px-4 tw-py-4 tw-transition-all tw-border-b tw-border-black/10"
            role="radio"
            aria-checked="true"
            tabindex="0"
          >
            <div class="radio-circle"></div>
            <div class="tw-flex tw-flex-1 tw-items-center tw-justify-between tw-gap-4">
              <div class="tw-flex tw-flex-col">
                <span class="tw-text-base tw-font-bold tw-leading-tight">1 Bag <span class="tw-font-normal tw-text-sm">(20% OFF)</span></span>
              </div>
              <div class="tw-flex tw-items-center tw-gap-2">
                <span class="price-compare tw-text-sm tw-text-black/50 tw-line-through tw-whitespace-nowrap">$45.00</span>
                <span class="price-final tw-text-lg tw-font-bold tw-whitespace-nowrap">$35.97</span>
                <span class="tw-rounded-md tw-bg-[#D2AF4BFF] tw-px-2 tw-py-1 tw-text-xs tw-font-bold tw-text-white tw-whitespace-nowrap">Save $9.03</span>
              </div>
            </div>
          </label>
        </div>

        {% comment %} 2 Bags Option {% endcomment %}
        <div>
          <input
            class="caramel-apple-option visually-hidden"
            type="radio"
            name="caramel-apple-quantity"
            id="caramel-apple-qty-2"
            value="2"
            data-variant-id="51253690368292"
            data-original-price="90.00"
            data-discount-price="67.50"
            onchange="onChangeCaramelAppleQuantity(this)"
          >
          <label
            for="caramel-apple-qty-2"
            class="tw-flex tw-cursor-pointer tw-items-center tw-gap-3 tw-bg-white tw-px-4 tw-py-4 tw-transition-all tw-border-b tw-border-black/10"
            role="radio"
            aria-checked="false"
            tabindex="0"
          >
            <div class="radio-circle"></div>
            <div class="tw-flex tw-flex-1 tw-items-center tw-justify-between tw-gap-4">
              <div class="tw-flex tw-flex-col">
                <span class="tw-text-base tw-font-bold tw-leading-tight">2 Bags <span class="tw-font-normal tw-text-sm">(25% OFF)</span></span>
              </div>
              <div class="tw-flex tw-items-center tw-gap-2">
                <span class="price-compare tw-text-sm tw-text-black/50 tw-line-through tw-whitespace-nowrap">$90.00</span>
                <span class="price-final tw-text-lg tw-font-bold tw-whitespace-nowrap">$67.50</span>
                <span class="tw-rounded-md tw-bg-[#D2AF4BFF] tw-px-2 tw-py-1 tw-text-xs tw-font-bold tw-text-white tw-whitespace-nowrap">Save $22.50</span>
              </div>
            </div>
          </label>
        </div>

        {% comment %} 3 Bags Option {% endcomment %}
        <div>
          <input
            class="caramel-apple-option visually-hidden"
            type="radio"
            name="caramel-apple-quantity"
            id="caramel-apple-qty-3"
            value="3"
            data-variant-id="51253690368292"
            data-original-price="135.00"
            data-discount-price="94.50"
            onchange="onChangeCaramelAppleQuantity(this)"
          >
          <label
            for="caramel-apple-qty-3"
            class="tw-flex tw-cursor-pointer tw-items-center tw-gap-3 tw-bg-white tw-px-4 tw-py-4 tw-transition-all"
            role="radio"
            aria-checked="false"
            tabindex="0"
          >
            <div class="radio-circle"></div>
            <div class="tw-flex tw-flex-1 tw-items-center tw-justify-between tw-gap-4">
              <div class="tw-flex tw-flex-col">
                <span class="tw-text-base tw-font-bold tw-leading-tight">3 Bags <span class="tw-font-normal tw-text-sm">(30% OFF)</span></span>
              </div>
              <div class="tw-flex tw-items-center tw-gap-2">
                <span class="price-compare tw-text-sm tw-text-black/50 tw-line-through tw-whitespace-nowrap">$135.00</span>
                <span class="price-final tw-text-lg tw-font-bold tw-whitespace-nowrap">$94.50</span>
                <span class="tw-rounded-md tw-bg-[#D2AF4BFF] tw-px-2 tw-py-1 tw-text-xs tw-font-bold tw-text-white tw-whitespace-nowrap">Save $40.50</span>
              </div>
            </div>
          </label>
        </div>
      </div>
    </div>

    <div class="d-flex">
      <button
        class="btn-atc btn btn-primary w-100 tw-uppercase tw-bg-[#D2AF4BFF] tw-text-white tw-py-3 tw-px-4 tw-rounded-lg tw-font-bold tw-text-xl"
        type="submit"
        id="product-atc-button"
        name="add"
        data-text-add-to-cart="{{ 'product.add_to_cart' | t }}"
        data-text-buy-now="Buy Now"
        {% unless current_variant.available %}
          disabled
        {% endunless %}
      >
        {% if current_variant.available %}
          {{ 'product.add_to_cart' | t }}
        {% else %}
          {{ 'product.sold_out' | t }}
        {% endif %}
      </button>
    </div>
    {% render 'product-qty-breaks' %}
  {% endform %}
</div>

<script>
  document.querySelector('#product-atc-button').addEventListener('click', () => {
    const checkout = document.querySelector('.hs-checkout-purchase');
    const newButton = checkout.cloneNode(true);
    checkout.parentNode.replaceChild(newButton, checkout);
    newButton.addEventListener('click', (e) => {
      window.location.href = '/checkout';
    });
  });

  // Caramel Apple quantity selection handler
  function onChangeCaramelAppleQuantity(input) {
    const quantity = input.value;
    const variantId = input.dataset.variantId;
    
    // Update hidden inputs
    document.getElementById('variant-id-input').value = variantId;
    document.getElementById('quantity-input').value = quantity;
    
    // Update aria-checked states
    const allLabels = document.querySelectorAll('[name="caramel-apple-quantity"] + label');
    allLabels.forEach(label => label.setAttribute('aria-checked', 'false'));
    input.nextElementSibling.setAttribute('aria-checked', 'true');
    
    console.log('Caramel Apple - Quantity:', quantity, 'Variant ID:', variantId);
  }

  // Toggle between standard and Caramel Apple buy box
  function toggleCaramelAppleBuyBox(isCaramelApple) {
    const sizeSelector = document.querySelector('[data-size-selector]');
    const subscriptionBlock = document.querySelector('[data-subscription-block]');
    const caramelAppleOptions = document.querySelector('[data-caramel-apple-options]');
    const atcButton = document.getElementById('product-atc-button');
    
    if (isCaramelApple) {
      // Hide standard options
      if (sizeSelector) sizeSelector.style.display = 'none';
      if (subscriptionBlock) subscriptionBlock.style.display = 'none';
      
      // Show Caramel Apple options
      if (caramelAppleOptions) {
        caramelAppleOptions.style.display = 'block';
        
        // Set the variant ID and quantity based on the checked option
        const checkedOption = document.querySelector('input[name="caramel-apple-quantity"]:checked');
        if (checkedOption) {
          document.getElementById('variant-id-input').value = checkedOption.dataset.variantId;
          document.getElementById('quantity-input').value = checkedOption.value;
        }
      }
      
      // Change button text to "BUY NOW"
      if (atcButton) {
        atcButton.textContent = atcButton.dataset.textBuyNow || 'Buy Now';
      }
    } else {
      // Show standard options
      if (sizeSelector) sizeSelector.style.display = 'block';
      if (subscriptionBlock) subscriptionBlock.style.display = 'block';
      
      // Hide Caramel Apple options
      if (caramelAppleOptions) caramelAppleOptions.style.display = 'none';
      
      // Reset quantity to 1
      document.getElementById('quantity-input').value = '1';
      
      // Restore original button text
      if (atcButton) {
        atcButton.textContent = atcButton.dataset.textAddToCart || 'Add to Cart';
      }
    }
  }

  // Listen for flavor changes
  document.addEventListener('DOMContentLoaded', function() {
    const flavorInput = document.getElementById('flavor-value');
    
    // Check initial flavor on page load
    if (flavorInput) {
      const initialFlavor = flavorInput.value;
      toggleCaramelAppleBuyBox(initialFlavor === 'Caramel Apple');
    }
    
    // Create a MutationObserver to watch for flavor changes
    if (flavorInput) {
      const observer = new MutationObserver(function(mutations) {
        mutations.forEach(function(mutation) {
          if (mutation.type === 'attributes' && mutation.attributeName === 'value') {
            const currentFlavor = flavorInput.value;
            toggleCaramelAppleBuyBox(currentFlavor === 'Caramel Apple');
          }
        });
      });
      
      observer.observe(flavorInput, { attributes: true });
    }
    
    // Also listen to the flavor dropdown labels
    const flavorLabels = document.querySelectorAll('[data-flavor-content][data-flavor]');
    flavorLabels.forEach(label => {
      label.addEventListener('click', function() {
        const selectedFlavor = this.dataset.flavor;
        setTimeout(() => {
          toggleCaramelAppleBuyBox(selectedFlavor === 'Caramel Apple');
        }, 100);
      });
    });
  });
</script>
