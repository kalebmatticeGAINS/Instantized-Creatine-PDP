
{{ 'tailwind.min.css' | asset_url | stylesheet_tag }}
<script src="{{ 'vendor-glightbox.min.js' | asset_url }}" defer></script>
<script src="{{ 'replo-product-form.js' | asset_url }}" defer></script>

<style>
  /* Selected state styling for size and color options */
  .product-option:checked + label {
    border-color: rgba(0, 0, 0, 0.8) !important;
    background-color: rgba(0, 0, 0, 0.04) !important;
    color: #000 !important;
  }

  /* Caramel Apple One Time Purchase Box */
  .caramel-apple-buybox {
    display: none;
    padding: 1.5rem;
    border: 1px solid rgba(0, 0, 0, 0.15);
    border-radius: 12px;
    background-color: #fafafa;
    margin-bottom: 1.5rem;
  }

  .caramel-apple-buybox.active {
    display: block;
  }

  .caramel-apple-option {
    position: absolute;
    opacity: 0;
    pointer-events: none;
  }

  .caramel-apple-card {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem;
    margin-bottom: 0.75rem;
    border: 2px solid rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    background-color: #fff;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .caramel-apple-card:hover {
    border-color: rgba(0, 0, 0, 0.4);
  }

  .caramel-apple-card:focus-within {
    outline: 2px solid #D2AF4BFF;
    outline-offset: 2px;
  }

  .caramel-apple-option:checked + .caramel-apple-card {
    border-color: #000;
    border-width: 2px;
  }

  .caramel-apple-radio {
    position: relative;
    width: 20px;
    height: 20px;
    border: 2px solid rgba(0, 0, 0, 0.3);
    border-radius: 50%;
    flex-shrink: 0;
    background-color: #fff;
  }

  .caramel-apple-radio::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: #000;
    opacity: 0;
    transition: opacity 0.2s;
  }

  .caramel-apple-option:checked + .caramel-apple-card .caramel-apple-radio::after {
    opacity: 1;
  }

  .caramel-apple-option:checked + .caramel-apple-card .caramel-apple-radio {
    border-color: #000;
  }

  .caramel-apple-content {
    flex: 1;
    display: flex;
    flex-wrap: wrap;
    align-items: center;
    justify-content: space-between;
    gap: 0.5rem;
  }

  .caramel-apple-label {
    font-weight: 700;
    font-size: 1rem;
    line-height: 1.3;
  }

  .caramel-apple-savings {
    font-size: 0.875rem;
    color: #666;
    margin-top: 0.125rem;
  }

  .caramel-apple-pricing {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .caramel-apple-price-compare {
    font-size: 0.875rem;
    color: #999;
    text-decoration: line-through;
  }

  .caramel-apple-price-final {
    font-size: 1.125rem;
    font-weight: 700;
  }

  .caramel-apple-badge {
    font-size: 0.75rem;
    font-weight: 700;
    padding: 0.25rem 0.5rem;
    background-color: #D2AF4BFF;
    color: #fff;
    border-radius: 4px;
    white-space: nowrap;
  }


  @media (max-width: 640px) {
    .caramel-apple-content {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .caramel-apple-pricing {
      width: 100%;
      justify-content: flex-start;
    }
  }
</style>

{% liquid
  assign current_variant = product.selected_or_first_available_variant
%}

<script type="application/json" id="replo-product-data">
  {
    "variants": {{ product.variants | json }},
    "title": {{ product.title | json }}
  }
</script>

<script>
  console.log('this is being rendered')
  window.productVariants = {{ product.variants | json }}
</script>

<div class="form-wrapper rounded">
  {% form 'product', product, onsubmit: 'onSubmitAtcForm(this, event)' %}
    <input type="hidden" name="id" value="{{ current_variant.id }}" id="variant-id-input">
    <input type="hidden" name="quantity" value="1" id="quantity-input">

    {% unless product.has_only_default_variant %}
      <ul
        class="product-options list-unstyled mb-6"
        aria-label="{{ 'product.product_options' | t }}"
      >
        {% for option in product.options_with_values %}
          {% if settings.size_buttons_names contains option.name %}
            <div data-size-selector>
              <div class="tw-mb-3 tw-flex tw-items-center tw-justify-between">
                <span class="tw-text-base tw-font-bold tw-uppercase">{{ option.name }}</span>
              </div>
              <ul class="size-buttons list-unstyled tw-flex tw-flex-wrap tw-gap-2 tw-mb-6" aria-label="{{ option.name }}">
              {% for value in option.values %}
                <li class="tw-m-0 tw-block tw-p-0">
                  <input
                    class="product-option visually-hidden"
                    type="radio"
                    name="option-{{ option.name | handleize }}"
                    id="option-{{ option.name | handleize }}-{{ value | handleize }}"
                    value="{{ value | escape }}"
                    data-product-id="{{ product.id }}"
                    onchange="onChangeProductOption(this, event)"
                    {% if option.selected_value == value %}
                      checked
                    {% endif %}
                  >
                  <label 
                    for="option-{{ option.name | handleize }}-{{ value | handleize }}"
                    class="tw-flex tw-min-w-12 tw-h-12 tw-cursor-pointer tw-items-center tw-justify-center tw-rounded-xl tw-border tw-border-solid tw-border-black/25 tw-bg-white tw-px-4 tw-py-3 tw-text-center tw-text-base tw-font-bold tw-uppercase tw-transition-all hover:tw-border-black/50"
                  >
                    {{ value }}
                  </label>
                </li>
              {% endfor %}
            </ul>
            </div>
          {% endif %}
          {% if option.name == 'Flavor' %}
            {% comment %} FLAVOR OPTIONS {% endcomment %}
            <div class="tw-mt-6">
              <div class="tw-mb-3 tw-flex tw-items-center tw-justify-between">
                <span class="tw-text-base tw-font-bold tw-uppercase">Flavor</span>
              </div>

              <div class="tw-relative">
                <button
                  type="button"
                  class="tw-flex tw-w-full tw-items-center tw-gap-3 tw-rounded-xl tw-border tw-border-solid tw-border-black/25 tw-bg-white tw-px-4 tw-py-3 tw-text-left tw-text-black"
                  data-selector-toggle
                  data-selected-option="og"
                >
                  <div class="tw-flex tw-items-center tw-gap-3" data-flavor-content>
                    {% for image in product.metafields.custom.flavor_badges.value %}
                      {{
                        image
                        | image_url: width: 150, height: 150, crop: 'center'
                        | image_tag: class: 'tw-size-9 tw-rounded-full tw-object-contain tw-p-1', height: 150, width: 150
                      }}
                      {% break %}
                    {% endfor %}

                    <span class="tw-text-base tw-font-bold tw-uppercase">{{ option.values.first }}</span>
                  </div>

                  <svg
                    class="tw-ml-auto tw-size-8 tw-transition-all"
                    width="42"
                    height="42"
                    viewBox="0 0 42 42"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <g clip-path="url(#clip0_23_31)">
                    <path d="M12.4511 14.5163L9.98364 16.9838L20.4836 27.4838L30.9836 16.9838L28.5161 14.5163L20.4836 22.5313L12.4511 14.5163Z" fill="black"/>
                    </g>
                    <defs>
                    <clipPath id="clip0_23_31">
                    <rect width="42" height="42" fill="white"/>
                    </clipPath>
                    </defs>
                  </svg>
                </button>

                <div
                  class="
                    tw-absolute tw-left-0 tw-top-full tw-z-[1] tw-mt-2 tw-grid tw-w-full tw-rounded-xl tw-border tw-border-solid
                    tw-border-black/25 tw-bg-white tw-shadow-lg tw-transition-all
                  "
                  style="grid-template-rows: 0fr; opacity: 0;"
                  data-selector-content
                >
                  <div class="tw-overflow-hidden">
                    <input
                      class="product-option visually-hidden"
                      id="flavor-value"
                      name="flavor"
                      data-product-handle="{{ product.handle }}"
                      data-product-id="{{ product.id }}"
                      value="{{ option.values.first }}"
                      onchange="onChangeProductOption(this, event)"
                    >
                    <ul class="tw-m-0 tw-list-none tw-p-0">
                      {% for value in option.values %}
                        <li class="tw-m-0 tw-block tw-p-0">
                          <label
                            class="tw-flex tw-w-full tw-cursor-pointer tw-items-center tw-gap-3 tw-border-0 tw-bg-transparent tw-px-4 tw-py-3 tw-text-left tw-text-black"
                            data-flavor-content
                            data-flavor="{{ value }}"
                            data-variant-id="{{ value.variant.id }}"
                          >
                            {% assign current_index = forloop.index0 %}
                            {% for image in product.metafields.custom.flavor_badges.value %}
                              {% if forloop.index0 == current_index %}
                                {{
                                  image
                                  | image_url: width: 150, height: 150, crop: 'center'
                                  | image_tag: class: 'tw-size-9 tw-rounded-full tw-object-contain tw-p-1', height: 150, width: 150
                                }}
                              {% endif %}
                            {% endfor %}

                            <span class="tw-text-base tw-font-bold tw-uppercase">{{ value }}</span>
                            {%  if value == 'Caramel Apple' %}
                              <span class="tw-text-xs tw-font-bold tw-uppercase tw-text-white tw-p-1 tw-rounded-lg" style="background: linear-gradient(135deg, #E48722, #E48720, #D7B330, #C4D839, #C3D939);">NEW!</span>
                            {% endif %}
                          </label>
                        </li>
                      {% endfor %}
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          {%  endif %}
        {% endfor %}
      </ul>
    {% endunless %}

    {% comment %} {% render 'product-purchase-options' %} {% endcomment %}
    {%- assign form_id = 'product_form_' | append: product.id -%}
    <div data-subscription-block>
      {% render 'skio-block', product: product, product_form_id: form_id, debug: false %}
    </div>

    {% comment %} CARAMEL APPLE - ONE TIME PURCHASE {% endcomment %}
    <div id="caramel-apple-buybox" class="caramel-apple-buybox" data-caramel-apple-buybox>
      <h3 style="margin: 0 0 1rem 0; font-size: 1rem; font-weight: 700; text-transform: uppercase;">One Time Purchase</h3>
      
      <fieldset style="border: none; padding: 0; margin: 0;">
        <legend class="visually-hidden">Select quantity</legend>
        
        {% comment %} 1 Bag Option {% endcomment %}
        <input
          class="caramel-apple-option"
          type="radio"
          name="caramel-apple-quantity"
          id="caramel-apple-qty-1"
          value="1"
          data-variant-id="51253690368292"
          data-price="35.97"
          data-compare-price="45.00"
          data-savings="9.03"
          checked
          aria-label="1 Bag - 20% off - $35.97"
        >
        <label for="caramel-apple-qty-1" class="caramel-apple-card">
          <span class="caramel-apple-radio" aria-hidden="true"></span>
          <div class="caramel-apple-content">
            <div>
              <div class="caramel-apple-label">1 Bag</div>
              <div class="caramel-apple-savings">20% savings</div>
            </div>
            <div class="caramel-apple-pricing">
              <span class="caramel-apple-price-compare">$45.00</span>
              <span class="caramel-apple-price-final">$35.97</span>
              <span class="caramel-apple-badge">Save $9.03</span>
            </div>
          </div>
        </label>

        {% comment %} 2 Bags Option {% endcomment %}
        <input
          class="caramel-apple-option"
          type="radio"
          name="caramel-apple-quantity"
          id="caramel-apple-qty-2"
          value="2"
          data-variant-id="51253690368292"
          data-price="67.50"
          data-compare-price="90.00"
          data-savings="22.50"
          aria-label="2 Bags - 25% off - $67.50"
        >
        <label for="caramel-apple-qty-2" class="caramel-apple-card">
          <span class="caramel-apple-radio" aria-hidden="true"></span>
          <div class="caramel-apple-content">
            <div>
              <div class="caramel-apple-label">2 Bags</div>
              <div class="caramel-apple-savings">25% savings</div>
            </div>
            <div class="caramel-apple-pricing">
              <span class="caramel-apple-price-compare">$90.00</span>
              <span class="caramel-apple-price-final">$67.50</span>
              <span class="caramel-apple-badge">Save $22.50</span>
            </div>
          </div>
        </label>

        {% comment %} 3 Bags Option {% endcomment %}
        <input
          class="caramel-apple-option"
          type="radio"
          name="caramel-apple-quantity"
          id="caramel-apple-qty-3"
          value="3"
          data-variant-id="51253690368292"
          data-price="94.50"
          data-compare-price="135.00"
          data-savings="40.50"
          aria-label="3 Bags - 30% off - $94.50"
        >
        <label for="caramel-apple-qty-3" class="caramel-apple-card">
          <span class="caramel-apple-radio" aria-hidden="true"></span>
          <div class="caramel-apple-content">
            <div>
              <div class="caramel-apple-label">3 Bags</div>
              <div class="caramel-apple-savings">30% savings</div>
            </div>
            <div class="caramel-apple-pricing">
              <span class="caramel-apple-price-compare">$135.00</span>
              <span class="caramel-apple-price-final">$94.50</span>
              <span class="caramel-apple-badge">Save $40.50</span>
            </div>
          </div>
        </label>
      </fieldset>
    </div>

    <div class="d-flex" id="standard-atc-button-wrapper">
      <button
        class="btn-atc btn btn-primary w-100 tw-uppercase tw-bg-[#D2AF4BFF] tw-text-white tw-py-3 tw-px-4 tw-rounded-lg tw-font-bold tw-text-xl"
        type="submit"
        id="product-atc-button"
        name="add"
        data-text-add-to-cart="{{ 'product.add_to_cart' | t }}"
        {% unless current_variant.available %}
          disabled
        {% endunless %}
      >
        {% if current_variant.available %}
          {{ 'product.add_to_cart' | t }}
        {% else %}
          {{ 'product.sold_out' | t }}
        {% endif %}
      </button>
    </div>
    {% render 'product-qty-breaks' %}
  {% endform %}
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const atcButton = document.querySelector('#product-atc-button');
    if (atcButton) {
      atcButton.addEventListener('click', () => {
        const checkout = document.querySelector('.hs-checkout-purchase');
        if (checkout) {
          const newButton = checkout.cloneNode(true);
          checkout.parentNode.replaceChild(newButton, checkout);
          newButton.addEventListener('click', (e) => {
            window.location.href = '/checkout';
          });
        }
      });
    }
  });

  // Caramel Apple - Analytics helper
  function trackCaramelAppleEvent(eventName, data) {
    if (window.dataLayer) {
      window.dataLayer.push({
        event: eventName,
        flavor: 'Caramel Apple',
        ...data
      });
    }
    console.log('[Caramel Apple Analytics]', eventName, data);
  }

  // Caramel Apple option selection handler
  function handleCaramelAppleOptionChange(event) {
    const input = event.target;
    const variantId = input.dataset.variantId;
    const quantity = parseInt(input.value);
    const price = input.dataset.price;
    const savings = input.dataset.savings;

    // Update form inputs
    const variantIdInput = document.getElementById('variant-id-input');
    const quantityInput = document.getElementById('quantity-input');

    if (variantIdInput) {
      variantIdInput.value = variantId;
      variantIdInput.dispatchEvent(new Event('change', { bubbles: true }));
    }

    if (quantityInput) {
      quantityInput.value = quantity;
    }

    // Dispatch Skio variant change event
    if (window.productVariants && variantId) {
      const selectedVariant = window.productVariants.find(
        variant => variant.id.toString() === variantId
      );
      
      if (selectedVariant && variantIdInput) {
        const skioVariantChangeEvent = new CustomEvent('skio:variant-change', {
          detail: {
            selectedVariant: selectedVariant,
            form: variantIdInput.closest('form'),
            variantInput: variantIdInput
          },
          bubbles: true
        });
        document.dispatchEvent(skioVariantChangeEvent);
      }
    }

    // Dispatch custom event for image filtering
    const quantityChangeEvent = new CustomEvent('caramel-apple:quantity-change', {
      detail: { quantity: quantity },
      bubbles: true
    });
    document.dispatchEvent(quantityChangeEvent);

    // Track analytics event
    trackCaramelAppleEvent('caramel_apple_option_selected', {
      quantity: quantity,
      price: price,
      savings: savings
    });

    console.log('[Caramel Apple] Option selected:', { variantId, quantity, price, savings });
  }

  // Toggle between standard and Caramel Apple buy box
  function toggleCaramelAppleBuyBox(isCaramelApple) {
    try {
      const sizeSelector = document.querySelector('[data-size-selector]');
      const subscriptionBlock = document.querySelector('[data-subscription-block]');
      const caramelAppleBuybox = document.querySelector('[data-caramel-apple-buybox]');
      const standardAtcWrapper = document.getElementById('standard-atc-button-wrapper');
      
      if (isCaramelApple) {
        // Hide standard buy box elements
        if (sizeSelector) sizeSelector.style.display = 'none';
        if (subscriptionBlock) subscriptionBlock.style.display = 'none';
        
        // Show Caramel Apple buy box
        if (caramelAppleBuybox) {
          caramelAppleBuybox.classList.add('active');
          
          // Ensure first option is selected and update form inputs
          const firstOption = document.getElementById('caramel-apple-qty-1');
          if (firstOption && !document.querySelector('input[name="caramel-apple-quantity"]:checked')) {
            firstOption.checked = true;
            handleCaramelAppleOptionChange({ target: firstOption });
          } else {
            // Update form inputs with currently selected option
            const selectedOption = document.querySelector('input[name="caramel-apple-quantity"]:checked');
            if (selectedOption) {
              handleCaramelAppleOptionChange({ target: selectedOption });
            }
          }
        }
        
        // Show standard ATC button (it will use the form inputs we updated)
        if (standardAtcWrapper) standardAtcWrapper.style.display = 'flex';
        
        console.log('[Caramel Apple] Buy box activated');
      } else {
        // Show standard buy box elements
        if (sizeSelector) sizeSelector.style.display = 'block';
        if (subscriptionBlock) subscriptionBlock.style.display = 'block';
        if (standardAtcWrapper) standardAtcWrapper.style.display = 'flex';
        
        // Hide Caramel Apple buy box
        if (caramelAppleBuybox) {
          caramelAppleBuybox.classList.remove('active');
        }
        
        console.log('[Caramel Apple] Standard buy box restored');
      }
    } catch (error) {
      console.error('[Caramel Apple] Error toggling buy box:', error);
      // Fail gracefully - leave standard buy box visible
    }
  }

  // Initialize Caramel Apple functionality
  document.addEventListener('DOMContentLoaded', function() {
    console.log('[Caramel Apple] Initializing...');
    
    // Attach event listeners to Caramel Apple options
    const caramelAppleOptions = document.querySelectorAll('input[name="caramel-apple-quantity"]');
    caramelAppleOptions.forEach(option => {
      option.addEventListener('change', handleCaramelAppleOptionChange);
    });

    // Get flavor input element
    const flavorInput = document.getElementById('flavor-value');
    
    if (!flavorInput) {
      console.warn('[Caramel Apple] Flavor input not found, leaving standard buy box visible');
      return;
    }
    
    // Check initial flavor on page load
    const initialFlavor = flavorInput.value;
    toggleCaramelAppleBuyBox(initialFlavor === 'Caramel Apple');
    
    // If Caramel Apple is initially selected, update form inputs
    if (initialFlavor === 'Caramel Apple') {
      setTimeout(() => {
        const selectedOption = document.querySelector('input[name="caramel-apple-quantity"]:checked');
        if (selectedOption) {
          handleCaramelAppleOptionChange({ target: selectedOption });
        }
      }, 100);
    }
    
    // Create a MutationObserver to watch for flavor changes
    const observer = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.type === 'attributes' && mutation.attributeName === 'value') {
          const currentFlavor = flavorInput.value;
          toggleCaramelAppleBuyBox(currentFlavor === 'Caramel Apple');
          
          // If Caramel Apple is selected, update variant ID after buy box is set up
          if (currentFlavor === 'Caramel Apple') {
            setTimeout(() => {
              const selectedOption = document.querySelector('input[name="caramel-apple-quantity"]:checked');
              if (selectedOption) {
                handleCaramelAppleOptionChange({ target: selectedOption });
              }
            }, 100);
          }
        }
      });
    });
    
    observer.observe(flavorInput, { attributes: true });
    
    // Also listen to the flavor dropdown labels for immediate feedback
    const flavorLabels = document.querySelectorAll('[data-flavor-content][data-flavor]');
    flavorLabels.forEach(label => {
      label.addEventListener('click', function() {
        const selectedFlavor = this.dataset.flavor;
        setTimeout(() => {
          toggleCaramelAppleBuyBox(selectedFlavor === 'Caramel Apple');
          
          // If Caramel Apple is selected, update variant ID after buy box is set up
          if (selectedFlavor === 'Caramel Apple') {
            const selectedOption = document.querySelector('input[name="caramel-apple-quantity"]:checked');
            if (selectedOption) {
              handleCaramelAppleOptionChange({ target: selectedOption });
            }
          }
        }, 100);
      });
    });

    console.log('[Caramel Apple] Initialization complete');
  });

  // Keyboard accessibility for Caramel Apple options
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Enter' || e.key === ' ') {
      const target = e.target;
      if (target.classList.contains('caramel-apple-card')) {
        e.preventDefault();
        const radio = target.previousElementSibling;
        if (radio && radio.classList.contains('caramel-apple-option')) {
          radio.checked = true;
          radio.dispatchEvent(new Event('change'));
        }
      }
    }
  });
</script>
